name: Build and Release all packages in the repo - 2

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      script_pattern:
        description: "Pattern to match scripts to build (leave empty to build all)"
        required: false
        default: ""
      release:
        description: "Create a release (true/false)"
        required: false
        default: "true"

jobs:
  build:
    name: Set up rootfs and build packages
    runs-on: ubuntu-latest
    permissions: write-all
    container:
      image: "alpine:latest"
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate TAG_NAME
        id: set_tag_name
        run: |
          TAG_NAME="v${GITHUB_RUN_NUMBER}-$(date +'%Y%m%d%H%M%S')"
          echo "$TAG_NAME" > tag_name.txt
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Upload TAG_NAME artifact
        uses: actions/upload-artifact@v4
        with:
          name: tag-name
          path: tag_name.txt

      - name: Download latest AliceLinux
        run: |
          set -eux
          apk update
          apk add curl tar wget
          
          LATEST_TAG=$(curl -s https://codeberg.org/api/v1/repos/emmett1/alicelinux/releases/latest | jq -r '.tag_name')
          mkdir ./alice
          wget -qO- "https://codeberg.org/emmett1/alicelinux/releases/download/${LATEST_TAG}/alicelinux-rootfs-${LATEST_TAG}.tar.xz" | tar -xJ -C ./alice

      - name: Chroot and Build Packages
        run: |
          set -eux
          ./alice/usr/bin/apkg-chroot ./alice sh << 'EOF'
          echo "Welcome to AliceLinux"
          
          # Setup
          git clone --depth=1 https://codeberg.org/emmett1/alicelinux /var/lib/alicelinux
          mkdir -p /var/cache/pkg /var/cache/src /var/cache/work
          
          cat <<CONFIG >> /etc/apkg.conf
          export CFLAGS="-O2 -march=x86-64-v3 -pipe"
          export MAKEFLAGS="-j$(nproc)"
          APKG_PACKAGE_DIR=/var/cache/pkg
          APKG_SOURCE_DIR=/var/cache/src
          APKG_WORK_DIR=/var/cache/work
          CONFIG
          
          export APKG_NOPROMPT=1
          apkg-reposync
          apkg -U || true
          apkg -I meson cmake pkgconf libtool automake perl ccache || true
          apkg -I $(apkg -s) || true
          apkg-clean || true
          EOF

      - name: Copy package files
        run: |
          mkdir -p ${{ github.workspace }}/packages
          cp ./alice/var/cache/pkg/*.spm ${{ github.workspace }}/packages/

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ${{ github.workspace }}/packages/*.spm

  release:
    name: Release Packages
    runs-on: ubuntu-latest
    needs: build
    permissions: write-all
    if: ${{ github.event.inputs.release == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ${{ github.workspace }}/packages

      - name: Download TAG_NAME artifact
        uses: actions/download-artifact@v4
        with:
          name: tag-name

      - name: Read TAG_NAME
        id: get_tag_name
        run: |
          TAG_NAME=$(cat tag_name.txt)
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Manage Tags
        run: |
          git fetch --tags
          TAGS=$(git tag | grep -v "^latest$" | sort -V)
          TAG_COUNT=$(echo "$TAGS" | wc -l)
          if [ "$TAG_COUNT" -gt 5 ]; then
            TAGS_TO_DELETE=$(echo "$TAGS" | head -n -5)
            for TAG in $TAGS_TO_DELETE; do
              git tag -d "$TAG"
              git push origin --delete "$TAG"
            done
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          name: "Package Release - ${{ env.TAG_NAME }}"
          tag_name: "${{ env.TAG_NAME }}"
          prerelease: ${{ github.event_name == 'workflow_dispatch' }}
          draft: false
          generate_release_notes: false
          make_latest: true
          files: |
            ${{ github.workspace }}/packages/*.spm
